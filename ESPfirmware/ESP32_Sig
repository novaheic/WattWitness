#include <Wire.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiClientSecure.h>
#include <Arduino.h>
#include <ArduinoECCX08.h>
#include <base64.h>

// WiFi credentials
const char* ssid = "Ondemand";            // <-- CHANGE THIS
const char* password = "";      // <-- CHANGE THIS
const char* shellyHost = "192.168.178.156"; // <-- CHANGE THIS
const char* backendHost = "wattwitness-api.loca.lt"; // <-- UPDATED TO TUNNEL URL

bool initialSetupSent = false;

void sendInitialSetup() {
  if (initialSetupSent) return;
  
  WiFiClientSecure client;
  client.setInsecure(); // For development - in production, use proper certificate validation
  HTTPClient http;
  String url = String("https://") + backendHost + "/api/v1/installations/"; // <-- CHANGED TO HTTPS
  http.begin(client, url);
  http.addHeader("Content-Type", "application/json");
  
  // Get the public key
  uint8_t publicKey[64];
  if (!ECCX08.generatePublicKey(0, publicKey)) {
    Serial.println("❌ Failed to get public key for initial setup");
    return;
  }
  
  // Convert public key to hex string
  String publicKeyHex = "";
  for (int i = 0; i < 64; i++) {
    if (publicKey[i] < 0x10) publicKeyHex += "0";
    publicKeyHex += String(publicKey[i], HEX);
  }
  
  // Get ShellyEM data for MAC address
  String shellyUrl = String("http://") + shellyHost + "/status";
  HTTPClient shellyHttp;
  shellyHttp.begin(shellyUrl);
  int shellyCode = shellyHttp.GET();
  if (shellyCode != 200) {
    Serial.println("❌ Failed to fetch ShellyEM data for initial setup");
    shellyHttp.end();
    return;
  }
  String shellyPayload = shellyHttp.getString();
  shellyHttp.end();
  
  // Base64 encode the ShellyEM payload
  String encodedPayload = base64::encode(shellyPayload);
  
  // Get current timestamp for boot time (use ShellyEM timestamp if available)
  unsigned long bootTimestamp = 0;
  int tsIndex = shellyPayload.indexOf("\"unixtime\":");
  if (tsIndex != -1) {
    bootTimestamp = shellyPayload.substring(tsIndex + 11).toInt();
  } else {
    bootTimestamp = time(nullptr); // Fallback to current time
  }
  
  // Prepare JSON payload for initial setup
  String jsonPayload = "{";
  jsonPayload += "\"name\":\"Hackathon Test 1\",";
  jsonPayload += "\"public_key\":\"" + publicKeyHex + "\",";
  jsonPayload += "\"shelly_payload\":\"" + encodedPayload + "\",";
  jsonPayload += "\"boot_timestamp\":" + String(bootTimestamp);
  jsonPayload += "}";
  
  int postCode = http.POST(jsonPayload);
  if (postCode > 0) {
    Serial.printf("✅ Initial setup sent! Response code: %d\n", postCode);
    String response = http.getString();
    Serial.println(response);
    initialSetupSent = true;
  } else {
    Serial.printf("❌ Failed to send initial setup. Error: %s\n", http.errorToString(postCode).c_str());
  }
  http.end();
}

void fetchAndSignTelemetry() {
  HTTPClient http;
  String url = String("http://") + shellyHost + "/status";
  http.begin(url);
  int httpCode = http.GET();
  if (httpCode != 200) {
    Serial.println("❌ Failed to fetch ShellyEM data.");
    http.end();
    return;
  }

  String payload = http.getString();
  http.end();

  Serial.println("📦 Shelly payload:");
  Serial.println(payload);

  float power = 0.0;
  float total_kwh = 0.0;
  long timestamp = 0;

  int pIndex = payload.indexOf("\"power\":");
  if (pIndex != -1) {
    power = payload.substring(pIndex + 8).toFloat();
  }

  int tIndex = payload.indexOf("\"total\":");
  if (tIndex != -1) {
    total_kwh = payload.substring(tIndex + 8).toFloat();
  }

  float total_wh = total_kwh * 1000.0;

  int tsIndex = payload.indexOf("\"unixtime\":");
  if (tsIndex != -1) {
    timestamp = payload.substring(tsIndex + 11).toInt();
  }

  char message[64];
  snprintf(message, sizeof(message), "ShellyEM power=%.1fW total=%.1fWh timestamp=%ld", power, total_wh, timestamp);
  Serial.print("📊 Data: ");
  Serial.println(message);

  // Sign message
  char padded[64] = {0};
  strncpy(padded, message, sizeof(padded));

  uint8_t signature[64];

  if (ECCX08.beginSHA256()) {
    ECCX08.updateSHA256((const byte*)padded);
    if (ECCX08.endSHA256(signature)) {
      Serial.print("✍️ Signature: ");
      for (int i = 0; i < 64; i++) {
        if (signature[i] < 0x10) Serial.print("0");
        Serial.print(signature[i], HEX);
      }
      Serial.println();

      // Base64 encode the ShellyEM payload for readings
      String encodedPayload = base64::encode(payload);
      // Prepare JSON payload for reading
      String jsonPayload = "{";
      jsonPayload += "\"power\":" + String(power, 2) + ",";
      jsonPayload += "\"total\":" + String(total_wh, 2) + ",";
      jsonPayload += "\"timestamp\":" + String(timestamp) + ",";
      jsonPayload += "\"signature\":\"";
      for (int i = 0; i < 64; i++) {
        if (signature[i] < 0x10) jsonPayload += "0";
        jsonPayload += String(signature[i], HEX);
      }
      jsonPayload += "\",";
      jsonPayload += "\"shelly_payload\":\"" + encodedPayload + "\"";
      jsonPayload += "}";

      // Send to backend
      WiFiClientSecure secureClient;
      secureClient.setInsecure(); // For development - in production, use proper certificate validation
      HTTPClient postHttp;
      String backendUrl = String("https://") + backendHost + "/api/v1/readings/"; // <-- CHANGED TO HTTPS
      postHttp.begin(secureClient, backendUrl);
      postHttp.addHeader("Content-Type", "application/json");
      int postCode = postHttp.POST(jsonPayload);
      if (postCode > 0) {
        Serial.printf("✅ Sent to backend! Response code: %d\n", postCode);
        String response = postHttp.getString();
        Serial.println(response);
      } else {
        Serial.printf("❌ Failed to send to backend. Error: %s\n", postHttp.errorToString(postCode).c_str());
      }
      postHttp.end();
    } else {
      Serial.println("❌ SHA256 + Sign failed");
    }
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔐 WattWitness: Live Signing Mode");

  WiFi.begin(ssid, password);
  Serial.print("📶 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("\n✅ WiFi connected");

  Wire.begin(21, 22);
  Wire.setClock(400000);

  if (!ECCX08.begin()) {
    Serial.println("❌ ATECC608A not found.");
    while (1);
  }
  Serial.println("✅ ATECC608A initialized.");

  // 🔓 Print the public key ONCE at startup
  uint8_t publicKey[64];
  if (ECCX08.generatePublicKey(0, publicKey)) {
    Serial.println("📤 Public Key:");
    for (int i = 0; i < 64; i++) {
      if (publicKey[i] < 0x10) Serial.print("0");
      Serial.print(publicKey[i], HEX);
    }
    Serial.println();
  } else {
    Serial.println("❌ Failed to get public key.");
  }
  
  // Send initial setup
  Serial.println("🚀 Sending initial setup...");
  sendInitialSetup();
}

void loop() {
  fetchAndSignTelemetry();
  delay(20000); // wait 20 seconds before repeating
}
